// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments

using System;
using System.Globalization;
using Ninject.Modules;
using BAF.Validation.Shared.Metadata;
using BAF.Common.Specifications;

namespace BAF.Validation.Shared.Generated
{
}

namespace BAF.Validation.Shared
{
	public interface IValidationResource : IResource
	{
		string NotNull { get; }
		string NotEmpty { get; }
		string LengthMustBeBetweenMinMax { get; }
		string LengthGreaterThanMax { get; }
		string LengthLowerThanMin { get; }
		string NotValidEmail { get; }
		string EqualToValue { get; }
	
	}
	public abstract class ValidationSubResource
    {
        protected readonly IValidationResource Res;

        protected ValidationSubResource(IValidationResource localizationResource)
        {
            Res = localizationResource;
        }
    }
	public partial class ValidationResource : IValidationResource
	{
		private readonly IResourceCache _localizationCache;

		public ValidationResource(IResourceCache locCache)  
		{
			_localizationCache = locCache;
		}
		public string GetResource(string path)
        {
            return _localizationCache.GetResource(CultureInfo.CurrentUICulture.Name, path);
        }
		public string GetResource(ISubResource subResource)
        {
            return subResource.ToString();
        }
		public string CreateNewResource(string path)
        {
            throw new NotSupportedException("T4 template must be run in order to repalce CreateNewResource function calls with the appropriate call");
        }
		public string NotNull 
		{ 
			get { return GetResource(ValidationResourcePaths.NotNull); } 
		}
		public string NotEmpty 
		{ 
			get { return GetResource(ValidationResourcePaths.NotEmpty); } 
		}
		public string LengthMustBeBetweenMinMax 
		{ 
			get { return GetResource(ValidationResourcePaths.LengthMustBeBetweenMinMax); } 
		}
		public string LengthGreaterThanMax 
		{ 
			get { return GetResource(ValidationResourcePaths.LengthGreaterThanMax); } 
		}
		public string LengthLowerThanMin 
		{ 
			get { return GetResource(ValidationResourcePaths.LengthLowerThanMin); } 
		}
		public string NotValidEmail 
		{ 
			get { return GetResource(ValidationResourcePaths.NotValidEmail); } 
		}
		public string EqualToValue 
		{ 
			get { return GetResource(ValidationResourcePaths.EqualToValue); } 
		}
	}

	public class ValidationResourceRegistration : NinjectModule
    {
        public override void Load()
        {
            Bind<IValidationResource>().To<ValidationResource>().InSingletonScope();
        }
    }
}
namespace BAF.Validation.Shared.Metadata
{
	public static class ValidationResourcePaths
	{
		public const string NotNull = "Validation.NotNull";
		public const string NotEmpty = "Validation.NotEmpty";
		public const string LengthMustBeBetweenMinMax = "Validation.LengthMustBeBetweenMinMax";
		public const string LengthGreaterThanMax = "Validation.LengthGreaterThanMax";
		public const string LengthLowerThanMin = "Validation.LengthLowerThanMin";
		public const string NotValidEmail = "Validation.NotValidEmail";
		public const string EqualToValue = "Validation.EqualToValue";
	}
}
