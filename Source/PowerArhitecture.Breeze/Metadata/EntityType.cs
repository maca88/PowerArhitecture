using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using PowerArhitecture.Breeze.Extensions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace PowerArhitecture.Breeze.Metadata
{
    public class EntityType : StructuralType
    {
        public EntityType() {}

        public EntityType(Type type) : base(type)
        {
        }

        public EntityType(Dictionary<string, object> dict) : base(dict)
        {
            
        }

        #region AutoGeneratedKeyType

        /// <summary>
        /// Defines the mechanism by which the key for entities of this type are determined on the server.  'None' means that the client sets the key.
        /// </summary>
        public AutoGeneratedKeyType AutoGeneratedKeyType
        {
            get { return OriginalDictionary.GetValue<AutoGeneratedKeyType>("autoGeneratedKeyType"); }
            set { OriginalDictionary["autoGeneratedKeyType"] = value.ToString(); }
        }

        #endregion

        #region DefaultResourceName

        /// <summary>
        /// The default name by which entities of this type will be queried.  Multipe 'resourceNames' may query for the same entityType, (see the 'resourceEntityTypeMap') but only one is the default.
        /// </summary>
        public string DefaultResourceName
        {
            get { return OriginalDictionary.GetValue<string>("defaultResourceName"); }
            set { OriginalDictionary["defaultResourceName"] = value; }
        }

        #endregion

        #region NavigationProperties

        private NavigationProperties _navigationProperties;

        public NavigationProperties NavigationProperties
        {
            get
            {
                if (_navigationProperties != null)
                    return _navigationProperties;
                if (!OriginalDictionary.ContainsKey("navigationProperties"))
                    OriginalDictionary["navigationProperties"] = new List<Dictionary<string, object>>();
                _navigationProperties = new NavigationProperties(OriginalDictionary["navigationProperties"] as List<Dictionary<string, object>>);
                return _navigationProperties;
            }
            set
            {
                _navigationProperties = value;
                OriginalDictionary["navigationProperties"] = value.OriginalList;
            }
        }

        #endregion
    }
}
