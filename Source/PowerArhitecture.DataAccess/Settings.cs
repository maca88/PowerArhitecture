
// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments

using System;
using Ninject.Modules;
using PowerArhitecture.Common.Configuration;


namespace PowerArhitecture.DataAccess.Settings
{
	public static class DatabaseSettingKeys
	{
		public const string ValidateSchema = "PowerArhitecture.Database.ValidateSchema:bool";
		public const string RecreateAtStartup = "PowerArhitecture.Database.RecreateAtStartup:bool";
		public const string UpdateSchemaAtStartup = "PowerArhitecture.Database.UpdateSchemaAtStartup:bool";
		public const string AllowOneToOneWithoutLazyLoading = "PowerArhitecture.Database.AllowOneToOneWithoutLazyLoading:bool";
		public const string ConventionsHiLoIdEnabled = "PowerArhitecture.Database.Conventions.HiLoId.Enabled:bool";
		public const string ConventionsHiLoIdTableName = "PowerArhitecture.Database.Conventions.HiLoId.TableName:string";
		public const string ConventionsHiLoIdMaxLo = "PowerArhitecture.Database.Conventions.HiLoId.MaxLo:int";
		public const string ConventionsIdDescending = "PowerArhitecture.Database.Conventions.IdDescending:bool";
		public const string ConventionsUniqueWithMultipleNulls = "PowerArhitecture.Database.Conventions.UniqueWithMultipleNulls:bool";
		public const string EnableEnvers = "PowerArhitecture.Database.EnableEnvers:bool";
	}
}


namespace PowerArhitecture.DataAccess.Settings
{
	public class ConventionsSettings
	{
		public ConventionsSettings()
		{
			HiLoId = new HiLoIdSettings();
		}
		public virtual HiLoIdSettings HiLoId { get; private set; }
		public virtual bool IdDescending 
		{ 
			get { return AppConfiguration.GetSetting<bool>("PowerArhitecture.Database.Conventions.IdDescending:bool"); }
		}
		public virtual bool UniqueWithMultipleNulls 
		{ 
			get { return AppConfiguration.GetSetting<bool>("PowerArhitecture.Database.Conventions.UniqueWithMultipleNulls:bool"); }
		}
	}

	public class HiLoIdSettings
	{
		public HiLoIdSettings()
		{
		}
		public virtual bool Enabled 
		{ 
			get { return AppConfiguration.GetSetting<bool>("PowerArhitecture.Database.Conventions.HiLoId.Enabled:bool"); }
		}
		public virtual string TableName 
		{ 
			get { return AppConfiguration.GetSetting<string>("PowerArhitecture.Database.Conventions.HiLoId.TableName:string"); }
		}
		public virtual int MaxLo 
		{ 
			get { return AppConfiguration.GetSetting<int>("PowerArhitecture.Database.Conventions.HiLoId.MaxLo:int"); }
		}
	}
}

namespace PowerArhitecture.DataAccess
{
	public partial class DatabaseSettings : Specifications.IDatabaseSettings
	{
		public DatabaseSettings()
		{
			Conventions = new Settings.ConventionsSettings(); 
		}
		public virtual bool ValidateSchema 
		{ 
			get { return AppConfiguration.GetSetting<bool>("PowerArhitecture.Database.ValidateSchema:bool"); } 
		}
		public virtual bool RecreateAtStartup 
		{ 
			get { return AppConfiguration.GetSetting<bool>("PowerArhitecture.Database.RecreateAtStartup:bool"); } 
		}
		public virtual bool UpdateSchemaAtStartup 
		{ 
			get { return AppConfiguration.GetSetting<bool>("PowerArhitecture.Database.UpdateSchemaAtStartup:bool"); } 
		}
		public virtual bool AllowOneToOneWithoutLazyLoading 
		{ 
			get { return AppConfiguration.GetSetting<bool>("PowerArhitecture.Database.AllowOneToOneWithoutLazyLoading:bool"); } 
		}
		public virtual bool EnableEnvers 
		{ 
			get { return AppConfiguration.GetSetting<bool>("PowerArhitecture.Database.EnableEnvers:bool"); } 
		}
		public virtual Settings.ConventionsSettings Conventions { get; private set; } 
	}

	public class DatabaseSettingsRegistration : NinjectModule
	{
		public override void Load()
		{
			Bind<Specifications.IDatabaseSettings>().To<DatabaseSettings>().InSingletonScope();
		}
	}
}

namespace PowerArhitecture.DataAccess.Specifications
{
	public interface IDatabaseSettings
	{
		bool ValidateSchema { get; }
		bool RecreateAtStartup { get; }
		bool UpdateSchemaAtStartup { get; }
		bool AllowOneToOneWithoutLazyLoading { get; }
		bool EnableEnvers { get; }
		Settings.ConventionsSettings Conventions { get; }
	}
}

