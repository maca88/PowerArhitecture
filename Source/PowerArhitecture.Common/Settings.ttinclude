<#@ include file="VsHelperInit.ttinclude"#>
<#@ include file="Header.ttinclude"#>
<#+
void Run(string settingsPrefix, string appKeyPrefix, string namespaceForGeneratedClasses, string ns)
{
	var settingTree = new ClassTree(string.Empty); 
	var allKeys = new Dictionary<string, string>();
	long idx = 1;  
	foreach (KeyValueConfigurationElement pair in VSHelper.Configuration(VSHelper.StartUpProject).AppSettings.Settings)
	{
		if(!pair.Key.StartsWith(appKeyPrefix)) continue;
		var fullnameTypePair = pair.Key.Split(':');
		var toSkip = appKeyPrefix.Split('.').Length;
		var fullname = string.Join(".", fullnameTypePair[0].Split('.').Skip(toSkip));

		var type = fullnameTypePair[1];
		allKeys.Add(pair.Key, fullname.Replace(".", ""));

		settingTree.AddClass(idx, VSHelper.GetClassName(fullname), VSHelper.GetClassNamespace(fullname), 
			new Dictionary<string, string>{{"type",type}, {"settingKey", pair.Key}});
		idx++;
		Warning(string.Format("{0} - {1} - {2}", VSHelper.GetClassName(fullname), pair.Value, type));
	}
	GenerateClasses(settingsPrefix, settingTree, namespaceForGeneratedClasses, ns, allKeys);
}

void GenerateClasses(string settingsPrefix, ClassTree settingTree, string namespaceForGeneratedClasses, string ns, Dictionary<string, string> allKeys)
{
#>
using System;
using Ninject.Modules;
using PowerArhitecture.Common.Configuration;


namespace <#=ns#>.<#=namespaceForGeneratedClasses#>
{
	public static class <#=settingsPrefix#>SettingKeys
	{
<#+
foreach(var pair in allKeys)
{
#>
		public const string <#=pair.Value#> = "<#=pair.Key#>";
<#+
}
#>
	}
}


namespace <#=ns#>.<#=namespaceForGeneratedClasses#>
{
<#+
foreach(var clsTree in settingTree.AllSubClassTrees)
{
#>
	public class <#=clsTree.Name#>Settings
	{
		public <#=clsTree.Name#>Settings()
		{
<#+
	foreach(var item in clsTree.SubClassTrees)
	{
#>
			<#=item.Value.Name#> = new <#=item.Value.Name#>Settings();
<#+
	}
#>
		}
<#+
	foreach(var item in clsTree.SubClassTrees)
	{
#>
		public virtual <#=item.Value.Name#>Settings <#=item.Value.Name#> { get; private set; }
<#+
	}
#>
<#+
	foreach(var item in clsTree.Classes)
	{
#>
		public virtual <#=clsTree.Data[item.Key]["type"]#> <#=item.Value#> 
		{ 
			get { return AppConfiguration.GetSetting<<#=clsTree.Data[item.Key]["type"]#>>("<#=clsTree.Data[item.Key]["settingKey"]#>"); }
		}
<#+
	}
#>
	}
<#+
}
#>
}

namespace <#=ns#>
{
	public partial class <#=settingsPrefix#>Settings : Specifications.I<#=settingsPrefix#>Settings
	{
		public <#=settingsPrefix#>Settings()
		{
<#+
foreach(var child in settingTree.SubClassTrees)
{
	if(child.Value.Name == string.Empty) continue;
#>
			<#=child.Value.Name#> = new <#=namespaceForGeneratedClasses#>.<#=child.Value.FullName#>Settings(); 
<#+
}
#>
		}
<#+
foreach(var item in settingTree.Classes)
{
#>
		public virtual <#=settingTree.Data[item.Key]["type"]#> <#=item.Value#> 
		{ 
			get { return AppConfiguration.GetSetting<<#=settingTree.Data[item.Key]["type"]#>>("<#=settingTree.Data[item.Key]["settingKey"]#>"); } 
		}
<#+
}
foreach(var child in settingTree.SubClassTrees)
{
	if(child.Value.Name == string.Empty) continue;
#>
		public virtual <#=namespaceForGeneratedClasses#>.<#=child.Value.FullName#>Settings <#=child.Value.Name#> { get; private set; } 
<#+
}
#>
	}

	public class <#=settingsPrefix#>SettingsRegistration : NinjectModule
	{
		public override void Load()
		{
			Bind<Specifications.I<#=settingsPrefix#>Settings>().To<<#=settingsPrefix#>Settings>().InSingletonScope();
		}
	}
}

namespace <#=ns#>.Specifications
{
	public interface I<#=settingsPrefix#>Settings
	{
<#+
foreach(var item in settingTree.Classes)
{
#>
		<#=settingTree.Data[item.Key]["type"]#> <#=item.Value#> { get; }
<#+
}
foreach(var child in settingTree.SubClassTrees)
{
	if(child.Value.Name == string.Empty) continue;
#>
		<#=namespaceForGeneratedClasses#>.<#=child.Value.FullName#>Settings <#=child.Value.Name#> { get; }
<#+
}
#>
	}
}

<#+
} //End of GenerateClasses
#>
